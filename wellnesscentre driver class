package wellnessCentre;

import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.*;
import org.apache.hadoop.mapred.*;
import java.io.IOException;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import java.util.Iterator;

public class WellnessCentreDriver {
	public static void main(String[] args) {
		{
			JobClient my_client = new JobClient();
		    
		    JobConf job_conf = new JobConf(WellnessCentreDriver.class);

		    
		    job_conf.setJobName("WellnessCentre");

		   
		    job_conf.setOutputKeyClass(Text.class);
		    job_conf.setOutputValueClass(IntWritable.class);


		    job_conf.setMapperClass(wellnessCentre.WellnessMapper.class);
		    job_conf.setReducerClass(wellnessCentre.WellnessReducer.class);

		   
		    job_conf.setInputFormat(TextInputFormat.class);
		    job_conf.setOutputFormat(TextOutputFormat.class);

		   
		    FileInputFormat.setInputPaths(job_conf,  new Path(args[0]));
		    FileOutputFormat.setOutputPath(job_conf,  new Path(args[1]));

		    my_client.setConf(job_conf);
		    try {
		        
		        JobClient.runJob(job_conf);
		    } catch (Exception e) {
		        e.printStackTrace();
		}
		}
		

	}
public class WellnessMapper extends MapReduceBase implements Mapper <LongWritable,Text,Text,IntWritable>
{
	
	
	public void map(LongWritable key, Text value, OutputCollector <Text, IntWritable> output ,  Reporter reporter)throws IOException
	{
	private final static IntWritable one = new IntWritable(1);

		String str = value.toString();
		String[] categorydata = str.split(",");
		
		output.collect(new Text(categorydata[6]), one);
	}

} 
public class WellnessReducer extends MapReduceBase implements Reducer<Text, IntWritable, Text, IntWritable>
{
	public void reduce(Text t_key, Iterator<IntWritable> values, OutputCollector<Text,IntWritable> output ,  Reporter reporter)throws IOException
	{
		Text key = t_key;
		int freqofpro=0;
		while(values.hasNext())
		{
		
				IntWritable value = (IntWritable) values.next();
				freqofpro += value.get();
		}
		output.collect(key,new IntWritable(freqofpro));
	}
}
	

}
